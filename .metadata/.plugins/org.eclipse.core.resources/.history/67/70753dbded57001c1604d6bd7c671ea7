package quanmaduocchon;

import java.io.FileInputStream;
import java.util.Iterator;
import java.util.Scanner;

import utils.MyPath;

public class Solution {

	static int T, size, K, M, D;
	static char[][] arr;
	static int[] knights, others, doNots;

	// -1-2 -2-1 -21 -12 12 21 2-1 1-2
	static int[] dx = { -1, -2, -2, -1, 1, 2, 2, 1 };
	static int[] dy = { -2, -1, 1, 2, 2, 1, -1, -2 };

	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream(MyPath.getAbsoltePath("quanmaduocchon")));
			Scanner sc = new Scanner(System.in);
			T = sc.nextInt();
			for (int tc = 1; tc <= T; tc++) {
				int count = 0;
				int chosen = 0;
				size = sc.nextInt();
				arr = new char[size][size];

				K = sc.nextInt();
				knights = new int[K * 2];

				M = sc.nextInt();
				others = new int[M * 2];

				D = sc.nextInt();
				doNots = new int[D * 2];

				// input
				for (int i = 0; i < knights.length; i++) {
					knights[i] = sc.nextInt();
				}

				for (int i = 0; i < others.length; i++) {
					others[i] = sc.nextInt();
				}

				for (int i = 0; i < doNots.length; i++) {
					doNots[i] = sc.nextInt();
				}

				// fill knights, others and doNots into arr
				for (int i = 0; i < knights.length; i++) {
					if (i % 2 == 0 && i + 1 < knights.length) {
						arr[knights[i]][knights[i + 1]] = 'K';
					}
				}

				for (int i = 0; i < others.length; i++) {
					if (i % 2 == 0 && i + 1 < others.length) {
						arr[others[i]][others[i + 1]] = 'P';
					}
				}

				for (int i = 0; i < doNots.length; i++) {
					if (i % 2 == 0 && i + 1 < doNots.length) {
						arr[doNots[i]][doNots[i + 1]] = 'X';
					}
				}

				// solve
				for (int i = 0; i < knights.length; i++) {
					if (i % 2 == 0 && i + 1 < knights.length) {
						if (count < check(knights[i], knights[i + 1])) {
							count = check(knights[i], knights[i + 1]);
							chosen = i;
						}
					}
				}

				System.out.println("#" + tc + " " + knights[chosen] + " " + knights[chosen + 1] + " " + count);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static int check(int x, int y) {
		int count = 0;
		int tx = 0, ty = 0;
		for (int i = 0; i < 8; i++) {
			tx = x + dx[i];
			ty = y + dy[i];

			if (tx < 0 || tx > size - 1 || ty < 0 || ty > size - 1) {
				continue;
			}

			if (arr[tx][ty] == 'K' || arr[tx][ty] == 'P') {
				count++;
			}
		}
		return count;
	}
}
