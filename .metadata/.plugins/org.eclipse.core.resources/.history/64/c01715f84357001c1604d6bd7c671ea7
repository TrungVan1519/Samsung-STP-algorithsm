package id37191_robot_2;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.util.Scanner;

import utils.MyPath;

public class Solution {
	
	static int testCase;
	static int desX, desY, MOVEMENT_SIZE;
	static char[] robotAMovement, robotBMovement;
	static boolean isRobotAFinished, isRobotBFinished;
	
	static int robotADir, robotBDir; 
	
	// position updating rules 
	static int[] dx = { -1, 0, 1, 0 }; // row index
	static int[] dy = { 0, 1, 0, -1 }; // col index
	
	static enum DIR {
		LEFT, 	// 0
		UP,		// 1
		RIGHT,	// 2
		DOWN	// 3
	}
	
	public static void main(String[] args) throws FileNotFoundException {
		System.setIn(new FileInputStream(MyPath.getAbsoltePath("id37191_robot_2")));
		Scanner sc = new Scanner(System.in);
		
		testCase = sc.nextInt();
		
		for (int i = 1; i <= testCase; i++) {
			isRobotAFinished = false;
			isRobotBFinished = false;
			readInput(sc);
			System.out.print("#" + i + " ");
			solve();
		}
	}

	private static void readInput(Scanner sc) {
		desX = sc.nextInt();
		desY = sc.nextInt();
		
		MOVEMENT_SIZE = sc.nextInt();
		robotAMovement = new char[MOVEMENT_SIZE];
		robotBMovement = new char[MOVEMENT_SIZE];
		
		String robotAMovementString = sc.next();
		for (int i = 0; i < robotAMovementString.length(); i++) {
			robotAMovement[i] = robotAMovementString.charAt(i);
		}
		
		String robotBMovementString = sc.next();
		for (int i = 0; i < robotBMovementString.length(); i++) {
			robotBMovement[i] = robotBMovementString.charAt(i);
		}
	}

	private static void solve() {
		int txRobotA = 0, tyRobotA = 0, txRobotB = 0, tyRobotB = 0;
		robotADir = DIR.UP.ordinal();
		robotBDir = DIR.UP.ordinal();
		
		for (int i = 0; i < robotAMovement.length; i++) {
			if (txRobotA == desX && tyRobotA == desY) {
				isRobotAFinished = true;
				break;
			}
			
			if (robotAMovement[i] == 'C') {
				txRobotA += dx[robotADir];
				tyRobotA += dy[robotADir];
			} else if (robotAMovement[i] == 'L') {
				robotADir = turnLeft(robotADir);
				txRobotA += dx[robotADir];
				tyRobotA += dy[robotADir];
			} else if (robotAMovement[i] == 'R') {
				robotADir = turnRight(robotADir);
				txRobotA += dx[robotADir];
				tyRobotA += dy[robotADir];
			} else if (robotAMovement[i] == 'B') {
				robotADir = turnBack(robotADir);
				txRobotA += dx[robotADir];
				tyRobotA += dy[robotADir];
			} else if (robotAMovement[i] == 'W') {
				robotADir = DIR.LEFT.ordinal();
				txRobotA--;
			} else if (robotAMovement[i] == 'N') {
				robotADir = DIR.UP.ordinal();
				tyRobotA++;
			} else if (robotAMovement[i] == 'E') {
				robotADir = DIR.RIGHT.ordinal();
				txRobotA++;
			} else if (robotAMovement[i] == 'S') {
				robotADir = DIR.DOWN.ordinal();
				tyRobotA--;
			}
			
			if (txRobotA == desX && tyRobotA == desY) {
				isRobotAFinished = true;
				break;
			}
		}

		for (int i = 0; i < robotBMovement.length; i++) {
			if (txRobotB == desX && tyRobotB == desY) {
				isRobotBFinished = true;
				break;
			}
			
			if (robotBMovement[i] == 'C') {
				txRobotB += dx[robotBDir];
				tyRobotB += dy[robotBDir];
			} else if (robotBMovement[i] == 'L') {
				robotBDir = turnLeft(robotBDir);
				txRobotB += dx[robotBDir];
				tyRobotB += dy[robotBDir];
			} else if (robotBMovement[i] == 'R') {
				robotBDir = turnRight(robotBDir);
				txRobotB += dx[robotBDir];
				tyRobotB += dy[robotBDir];
			} else if (robotBMovement[i] == 'B') {
				robotBDir = turnBack(robotBDir);
				txRobotB += dx[robotBDir];
				tyRobotB += dy[robotBDir];
			} else if (robotBMovement[i] == 'W') {
				robotBDir = DIR.LEFT.ordinal();
				txRobotB--;
			} else if (robotBMovement[i] == 'N') {
				robotBDir = DIR.UP.ordinal();
				tyRobotB++;
			} else if (robotBMovement[i] == 'E') {
				robotBDir = DIR.RIGHT.ordinal();
				txRobotB++;
			} else if (robotBMovement[i] == 'S') {
				robotBDir = DIR.DOWN.ordinal();
				tyRobotB--;
			}
			
			if (txRobotB == desX && tyRobotB == desY) {
				isRobotBFinished = true;
				break;
			}
		}
		
		if (isRobotAFinished && isRobotBFinished) {
			System.out.println("Good game!");
		} else if (isRobotAFinished && !isRobotBFinished) {
			System.out.println("Team A win");
		} else if (!isRobotAFinished && isRobotBFinished) {
			System.out.println("Team B win");
		} else {
			String result = calculateDistance(txRobotA, tyRobotA, desX, desY) + " " + calculateDistance(txRobotB, tyRobotB, desX, desY);
			System.out.println(result);
		}
	}
	
	private static int turnLeft(int x) {
	    return (x + 3) % 4;
	}
	 
	private static int turnRight(int x) {
	    return (x + 1) % 4;
	}
	
	private static int turnBack(int x) {
		return (x + 2) % 4;
	}
	
	private static String calculateDistance(int x1, int y1, int x2, int y2) {
		return new DecimalFormat("#0.000").format(Math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1)));
	}
}
