package mirrorstrings;

import java.io.FileInputStream;
import java.util.Scanner;

import utils.MyPath;

public class AnotherSolution {

	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream(MyPath.getAbsoltePath("mirrorstrings")));
			Scanner sc = new Scanner(System.in);

			int T = sc.nextInt();
			for (int tc = 0; tc < T; tc++) {
				String str = sc.next();
				String sub = "";
				int count = 0;
				int lastIndex = 0;

				for (int i = 0; i < str.length(); i++) {
					for (int j = i + 1; j < str.length(); j++) {
						if (str.charAt(i) == str.charAt(j)) {
							String cut = str.substring(i, j + 1);
							if (isSymmetric(cut) && cut.length() > sub.length()) {
								sub = cut;
							}
						}
					}
				}
				
				while(lastIndex != -1){
				    lastIndex = str.indexOf(sub,lastIndex);
				    if(lastIndex != -1){
				        count ++;
				        lastIndex += sub.length();
				    }
				}

				System.out.println(sub.length() + " " + count);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static boolean isSymmetric(String s) {
		for (int i = 0; i < s.length() / 2; i++) {
			if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
				return false;
			}
		}
		return true;
	}
}
