package mirrorstrings;

import java.io.FileInputStream;
import java.util.Scanner;

import utils.MyPath;

public class Solution {

	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream(MyPath.getAbsoltePath("mirrorstrings")));
			Scanner sc = new Scanner(System.in);

			int T = sc.nextInt();
			for (int tc = 0; tc < T; tc++) {
				// solve
				String str = sc.next();
				int count = 0;

				for (int len = str.length(); len >= 1; len--) {
					count = countSubString(str, len);

					if (count > 0) {
						System.out.println(len + " " + count);
						break;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static int countSubString(String str, int len) {
		int count = 0;

		for (int i = 0; i < str.length() - len; i++) {
			if (isSymmetric(str, i, len)) {
				count++;
			}
		}

		return count;
	}

	static boolean isSymmetric(String str, int left, int len) {
		int right = left + len - 1;
		int mid = (right - left) / 2;
		for (int i = 0; i < mid; i++) {
			if (str.charAt(left + i) != str.charAt(right - i)) {
				return false;
			}
		}
		return true;
	}
}
